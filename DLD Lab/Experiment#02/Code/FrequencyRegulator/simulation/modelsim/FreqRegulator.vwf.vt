// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/18/2020 01:23:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FreqRegulator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FreqRegulator_vlg_sample_tst(
	clk,
	clk2,
	Down,
	GN,
	Init,
	setPeriod,
	sampler_tx
);
input  clk;
input  clk2;
input  Down;
input  GN;
input  Init;
input [7:0] setPeriod;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clk2 or Down or GN or Init or setPeriod)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FreqRegulator_vlg_check_tst (
	adjustedDiv,
	duration,
	equal,
	load,
	tffout,
	sampler_rx
);
input [7:0] adjustedDiv;
input [7:0] duration;
input  equal;
input  load;
input  tffout;
input sampler_rx;

reg [7:0] adjustedDiv_expected;
reg [7:0] duration_expected;
reg  equal_expected;
reg  load_expected;
reg  tffout_expected;

reg [7:0] adjustedDiv_prev;
reg [7:0] duration_prev;
reg  equal_prev;
reg  load_prev;
reg  tffout_prev;

reg [7:0] adjustedDiv_expected_prev;
reg [7:0] duration_expected_prev;
reg  equal_expected_prev;
reg  load_expected_prev;
reg  tffout_expected_prev;

reg [7:0] last_adjustedDiv_exp;
reg [7:0] last_duration_exp;
reg  last_equal_exp;
reg  last_load_exp;
reg  last_tffout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	adjustedDiv_prev = adjustedDiv;
	duration_prev = duration;
	equal_prev = equal;
	load_prev = load;
	tffout_prev = tffout;
end

// update expected /o prevs

always @(trigger)
begin
	adjustedDiv_expected_prev = adjustedDiv_expected;
	duration_expected_prev = duration_expected;
	equal_expected_prev = equal_expected;
	load_expected_prev = load_expected;
	tffout_expected_prev = tffout_expected;
end



// expected load
initial
begin
	load_expected = 1'bX;
end 

// expected tffout
initial
begin
	tffout_expected = 1'bX;
end 

// expected equal
initial
begin
	equal_expected = 1'bX;
end 
// expected duration[ 7 ]
initial
begin
	duration_expected[7] = 1'bX;
end 
// expected duration[ 6 ]
initial
begin
	duration_expected[6] = 1'bX;
end 
// expected duration[ 5 ]
initial
begin
	duration_expected[5] = 1'bX;
end 
// expected duration[ 4 ]
initial
begin
	duration_expected[4] = 1'bX;
end 
// expected duration[ 3 ]
initial
begin
	duration_expected[3] = 1'bX;
end 
// expected duration[ 2 ]
initial
begin
	duration_expected[2] = 1'bX;
end 
// expected duration[ 1 ]
initial
begin
	duration_expected[1] = 1'bX;
end 
// expected duration[ 0 ]
initial
begin
	duration_expected[0] = 1'bX;
end 
// expected adjustedDiv[ 7 ]
initial
begin
	adjustedDiv_expected[7] = 1'bX;
end 
// expected adjustedDiv[ 6 ]
initial
begin
	adjustedDiv_expected[6] = 1'bX;
end 
// expected adjustedDiv[ 5 ]
initial
begin
	adjustedDiv_expected[5] = 1'bX;
end 
// expected adjustedDiv[ 4 ]
initial
begin
	adjustedDiv_expected[4] = 1'bX;
end 
// expected adjustedDiv[ 3 ]
initial
begin
	adjustedDiv_expected[3] = 1'bX;
end 
// expected adjustedDiv[ 2 ]
initial
begin
	adjustedDiv_expected[2] = 1'bX;
end 
// expected adjustedDiv[ 1 ]
initial
begin
	adjustedDiv_expected[1] = 1'bX;
end 
// expected adjustedDiv[ 0 ]
initial
begin
	adjustedDiv_expected[0] = 1'bX;
end 
// generate trigger
always @(adjustedDiv_expected or adjustedDiv or duration_expected or duration or equal_expected or equal or load_expected or load or tffout_expected or tffout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected adjustedDiv = %b | expected duration = %b | expected equal = %b | expected load = %b | expected tffout = %b | ",adjustedDiv_expected_prev,duration_expected_prev,equal_expected_prev,load_expected_prev,tffout_expected_prev);
	$display("| real adjustedDiv = %b | real duration = %b | real equal = %b | real load = %b | real tffout = %b | ",adjustedDiv_prev,duration_prev,equal_prev,load_prev,tffout_prev);
`endif
	if (
		( adjustedDiv_expected_prev[0] !== 1'bx ) && ( adjustedDiv_prev[0] !== adjustedDiv_expected_prev[0] )
		&& ((adjustedDiv_expected_prev[0] !== last_adjustedDiv_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adjustedDiv[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adjustedDiv_expected_prev);
		$display ("     Real value = %b", adjustedDiv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adjustedDiv_exp[0] = adjustedDiv_expected_prev[0];
	end
	if (
		( adjustedDiv_expected_prev[1] !== 1'bx ) && ( adjustedDiv_prev[1] !== adjustedDiv_expected_prev[1] )
		&& ((adjustedDiv_expected_prev[1] !== last_adjustedDiv_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adjustedDiv[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adjustedDiv_expected_prev);
		$display ("     Real value = %b", adjustedDiv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adjustedDiv_exp[1] = adjustedDiv_expected_prev[1];
	end
	if (
		( adjustedDiv_expected_prev[2] !== 1'bx ) && ( adjustedDiv_prev[2] !== adjustedDiv_expected_prev[2] )
		&& ((adjustedDiv_expected_prev[2] !== last_adjustedDiv_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adjustedDiv[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adjustedDiv_expected_prev);
		$display ("     Real value = %b", adjustedDiv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adjustedDiv_exp[2] = adjustedDiv_expected_prev[2];
	end
	if (
		( adjustedDiv_expected_prev[3] !== 1'bx ) && ( adjustedDiv_prev[3] !== adjustedDiv_expected_prev[3] )
		&& ((adjustedDiv_expected_prev[3] !== last_adjustedDiv_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adjustedDiv[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adjustedDiv_expected_prev);
		$display ("     Real value = %b", adjustedDiv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adjustedDiv_exp[3] = adjustedDiv_expected_prev[3];
	end
	if (
		( adjustedDiv_expected_prev[4] !== 1'bx ) && ( adjustedDiv_prev[4] !== adjustedDiv_expected_prev[4] )
		&& ((adjustedDiv_expected_prev[4] !== last_adjustedDiv_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adjustedDiv[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adjustedDiv_expected_prev);
		$display ("     Real value = %b", adjustedDiv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adjustedDiv_exp[4] = adjustedDiv_expected_prev[4];
	end
	if (
		( adjustedDiv_expected_prev[5] !== 1'bx ) && ( adjustedDiv_prev[5] !== adjustedDiv_expected_prev[5] )
		&& ((adjustedDiv_expected_prev[5] !== last_adjustedDiv_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adjustedDiv[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adjustedDiv_expected_prev);
		$display ("     Real value = %b", adjustedDiv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adjustedDiv_exp[5] = adjustedDiv_expected_prev[5];
	end
	if (
		( adjustedDiv_expected_prev[6] !== 1'bx ) && ( adjustedDiv_prev[6] !== adjustedDiv_expected_prev[6] )
		&& ((adjustedDiv_expected_prev[6] !== last_adjustedDiv_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adjustedDiv[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adjustedDiv_expected_prev);
		$display ("     Real value = %b", adjustedDiv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adjustedDiv_exp[6] = adjustedDiv_expected_prev[6];
	end
	if (
		( adjustedDiv_expected_prev[7] !== 1'bx ) && ( adjustedDiv_prev[7] !== adjustedDiv_expected_prev[7] )
		&& ((adjustedDiv_expected_prev[7] !== last_adjustedDiv_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adjustedDiv[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adjustedDiv_expected_prev);
		$display ("     Real value = %b", adjustedDiv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adjustedDiv_exp[7] = adjustedDiv_expected_prev[7];
	end
	if (
		( duration_expected_prev[0] !== 1'bx ) && ( duration_prev[0] !== duration_expected_prev[0] )
		&& ((duration_expected_prev[0] !== last_duration_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port duration[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", duration_expected_prev);
		$display ("     Real value = %b", duration_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_duration_exp[0] = duration_expected_prev[0];
	end
	if (
		( duration_expected_prev[1] !== 1'bx ) && ( duration_prev[1] !== duration_expected_prev[1] )
		&& ((duration_expected_prev[1] !== last_duration_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port duration[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", duration_expected_prev);
		$display ("     Real value = %b", duration_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_duration_exp[1] = duration_expected_prev[1];
	end
	if (
		( duration_expected_prev[2] !== 1'bx ) && ( duration_prev[2] !== duration_expected_prev[2] )
		&& ((duration_expected_prev[2] !== last_duration_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port duration[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", duration_expected_prev);
		$display ("     Real value = %b", duration_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_duration_exp[2] = duration_expected_prev[2];
	end
	if (
		( duration_expected_prev[3] !== 1'bx ) && ( duration_prev[3] !== duration_expected_prev[3] )
		&& ((duration_expected_prev[3] !== last_duration_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port duration[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", duration_expected_prev);
		$display ("     Real value = %b", duration_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_duration_exp[3] = duration_expected_prev[3];
	end
	if (
		( duration_expected_prev[4] !== 1'bx ) && ( duration_prev[4] !== duration_expected_prev[4] )
		&& ((duration_expected_prev[4] !== last_duration_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port duration[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", duration_expected_prev);
		$display ("     Real value = %b", duration_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_duration_exp[4] = duration_expected_prev[4];
	end
	if (
		( duration_expected_prev[5] !== 1'bx ) && ( duration_prev[5] !== duration_expected_prev[5] )
		&& ((duration_expected_prev[5] !== last_duration_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port duration[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", duration_expected_prev);
		$display ("     Real value = %b", duration_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_duration_exp[5] = duration_expected_prev[5];
	end
	if (
		( duration_expected_prev[6] !== 1'bx ) && ( duration_prev[6] !== duration_expected_prev[6] )
		&& ((duration_expected_prev[6] !== last_duration_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port duration[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", duration_expected_prev);
		$display ("     Real value = %b", duration_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_duration_exp[6] = duration_expected_prev[6];
	end
	if (
		( duration_expected_prev[7] !== 1'bx ) && ( duration_prev[7] !== duration_expected_prev[7] )
		&& ((duration_expected_prev[7] !== last_duration_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port duration[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", duration_expected_prev);
		$display ("     Real value = %b", duration_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_duration_exp[7] = duration_expected_prev[7];
	end
	if (
		( equal_expected_prev !== 1'bx ) && ( equal_prev !== equal_expected_prev )
		&& ((equal_expected_prev !== last_equal_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port equal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", equal_expected_prev);
		$display ("     Real value = %b", equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_equal_exp = equal_expected_prev;
	end
	if (
		( load_expected_prev !== 1'bx ) && ( load_prev !== load_expected_prev )
		&& ((load_expected_prev !== last_load_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_expected_prev);
		$display ("     Real value = %b", load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_load_exp = load_expected_prev;
	end
	if (
		( tffout_expected_prev !== 1'bx ) && ( tffout_prev !== tffout_expected_prev )
		&& ((tffout_expected_prev !== last_tffout_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tffout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tffout_expected_prev);
		$display ("     Real value = %b", tffout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tffout_exp = tffout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FreqRegulator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk2;
reg Down;
reg GN;
reg Init;
reg [7:0] setPeriod;
// wires                                               
wire [7:0] adjustedDiv;
wire [7:0] duration;
wire equal;
wire load;
wire tffout;

wire sampler;                             

// assign statements (if any)                          
FreqRegulator i1 (
// port map - connection between master ports and signals/registers   
	.adjustedDiv(adjustedDiv),
	.clk(clk),
	.clk2(clk2),
	.Down(Down),
	.duration(duration),
	.equal(equal),
	.GN(GN),
	.Init(Init),
	.load(load),
	.setPeriod(setPeriod),
	.tffout(tffout)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// clk2
always
begin
	clk2 = 1'b0;
	clk2 = #10000 1'b1;
	#10000;
end 

// Down
initial
begin
	Down = 1'b1;
end 

// GN
initial
begin
	GN = 1'b0;
end 

// Init
initial
begin
	Init = 1'b1;
	Init = #150000 1'b0;
	Init = #320000 1'b1;
end 
// setPeriod[ 7 ]
initial
begin
	setPeriod[7] = 1'b0;
end 
// setPeriod[ 6 ]
initial
begin
	setPeriod[6] = 1'b1;
end 
// setPeriod[ 5 ]
initial
begin
	setPeriod[5] = 1'b1;
end 
// setPeriod[ 4 ]
initial
begin
	setPeriod[4] = 1'b1;
end 
// setPeriod[ 3 ]
initial
begin
	setPeriod[3] = 1'b1;
end 
// setPeriod[ 2 ]
initial
begin
	setPeriod[2] = 1'b1;
end 
// setPeriod[ 1 ]
initial
begin
	setPeriod[1] = 1'b0;
end 
// setPeriod[ 0 ]
initial
begin
	setPeriod[0] = 1'b1;
end 

FreqRegulator_vlg_sample_tst tb_sample (
	.clk(clk),
	.clk2(clk2),
	.Down(Down),
	.GN(GN),
	.Init(Init),
	.setPeriod(setPeriod),
	.sampler_tx(sampler)
);

FreqRegulator_vlg_check_tst tb_out(
	.adjustedDiv(adjustedDiv),
	.duration(duration),
	.equal(equal),
	.load(load),
	.tffout(tffout),
	.sampler_rx(sampler)
);
endmodule

