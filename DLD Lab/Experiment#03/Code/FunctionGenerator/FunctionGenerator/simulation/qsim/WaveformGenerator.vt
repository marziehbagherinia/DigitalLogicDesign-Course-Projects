// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/24/2020 16:23:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    WaveformGenerator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps

module WaveformGenerator_vlg_vec_tst();
reg clk;
reg rst;
reg [12:0] SW;
                                             
wire [7:0] data_out;                            
                         
WaveformGenerator i1 (  
	.clk(clk),
	.data_out(data_out),
	.rst(rst),
	.SW(SW)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #24000 1'b0;
	#500000000;
	$stop;
end 
// SW[ 12 ]
initial
begin
	SW[12] = 1'b1;
end 
// SW[ 11 ]
initial
begin
	SW[11] = 1'b0;
end 
// SW[ 10 ]
initial
begin
	SW[10] = 1'b0;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b1;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b1;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b1;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b1;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

endmodule