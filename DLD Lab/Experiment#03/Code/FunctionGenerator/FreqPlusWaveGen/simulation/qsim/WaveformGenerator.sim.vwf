/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 0.0;
	GRID_DUTY_CYCLE = 50;
}




SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("rst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("SW")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 13;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("SW[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("result[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 2.5;
	}
}
TRANSITION_LIST("rst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 976.0;
	}
}
TRANSITION_LIST("SW[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}
TRANSITION_LIST("SW[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("result[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.5;
		LEVEL 1 FOR 602.5;
	}
}
TRANSITION_LIST("result[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.5;
		LEVEL 1 FOR 602.5;
	}
}
TRANSITION_LIST("result[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.5;
		LEVEL 1 FOR 602.5;
	}
}
TRANSITION_LIST("result[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.5;
		LEVEL 1 FOR 602.5;
	}
}
TRANSITION_LIST("result[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.5;
		LEVEL 1 FOR 602.5;
	}
}
TRANSITION_LIST("result[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.5;
		LEVEL 1 FOR 602.5;
	}
}
TRANSITION_LIST("result[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.5;
		LEVEL 1 FOR 602.5;
	}
}
TRANSITION_LIST("result[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 397.5;
		LEVEL 1 FOR 602.5;
	}
}


DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "rst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "SW";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
	CHILDREN = 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15;
}

DISPLAY_LINE
{
	CHANNEL = "SW[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "SW[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
	CHILDREN = 17, 18, 19, 20, 21, 22, 23, 24;
}

DISPLAY_LINE
{
	CHANNEL = "result[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "result[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "result[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "result[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "result[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "result[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "result[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "result[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 16;
}
TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
