// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2020 11:54:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CounterDivider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CounterDivider_vlg_sample_tst(
	clk,
	DownUp,
	GN,
	In0,
	In1,
	In2,
	In3,
	In4,
	In5,
	In6,
	In7,
	Init,
	sampler_tx
);
input  clk;
input  DownUp;
input  GN;
input  In0;
input  In1;
input  In2;
input  In3;
input  In4;
input  In5;
input  In6;
input  In7;
input  Init;
output sampler_tx;

reg sample;
time current_time;
always @(clk or DownUp or GN or In0 or In1 or In2 or In3 or In4 or In5 or In6 or In7 or Init)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CounterDivider_vlg_check_tst (
	maxMin2,
	out0,
	out1,
	out2,
	out3,
	out4,
	out5,
	out6,
	out7,
	ripple1,
	sampler_rx
);
input  maxMin2;
input  out0;
input  out1;
input  out2;
input  out3;
input  out4;
input  out5;
input  out6;
input  out7;
input  ripple1;
input sampler_rx;

reg  maxMin2_expected;
reg  out0_expected;
reg  out1_expected;
reg  out2_expected;
reg  out3_expected;
reg  out4_expected;
reg  out5_expected;
reg  out6_expected;
reg  out7_expected;
reg  ripple1_expected;

reg  maxMin2_prev;
reg  out0_prev;
reg  out1_prev;
reg  out2_prev;
reg  out3_prev;
reg  out4_prev;
reg  out5_prev;
reg  out6_prev;
reg  out7_prev;
reg  ripple1_prev;

reg  maxMin2_expected_prev;
reg  out0_expected_prev;
reg  out1_expected_prev;
reg  out2_expected_prev;
reg  out3_expected_prev;
reg  out4_expected_prev;
reg  out5_expected_prev;
reg  out6_expected_prev;
reg  out7_expected_prev;
reg  ripple1_expected_prev;

reg  last_maxMin2_exp;
reg  last_out0_exp;
reg  last_out1_exp;
reg  last_out2_exp;
reg  last_out3_exp;
reg  last_out4_exp;
reg  last_out5_exp;
reg  last_out6_exp;
reg  last_out7_exp;
reg  last_ripple1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	maxMin2_prev = maxMin2;
	out0_prev = out0;
	out1_prev = out1;
	out2_prev = out2;
	out3_prev = out3;
	out4_prev = out4;
	out5_prev = out5;
	out6_prev = out6;
	out7_prev = out7;
	ripple1_prev = ripple1;
end

// update expected /o prevs

always @(trigger)
begin
	maxMin2_expected_prev = maxMin2_expected;
	out0_expected_prev = out0_expected;
	out1_expected_prev = out1_expected;
	out2_expected_prev = out2_expected;
	out3_expected_prev = out3_expected;
	out4_expected_prev = out4_expected;
	out5_expected_prev = out5_expected;
	out6_expected_prev = out6_expected;
	out7_expected_prev = out7_expected;
	ripple1_expected_prev = ripple1_expected;
end



// expected maxMin2
initial
begin
	maxMin2_expected = 1'bX;
end 

// expected out0
initial
begin
	out0_expected = 1'bX;
end 

// expected out1
initial
begin
	out1_expected = 1'bX;
end 

// expected out2
initial
begin
	out2_expected = 1'bX;
end 

// expected out3
initial
begin
	out3_expected = 1'bX;
end 

// expected out4
initial
begin
	out4_expected = 1'bX;
end 

// expected out5
initial
begin
	out5_expected = 1'bX;
end 

// expected out6
initial
begin
	out6_expected = 1'bX;
end 

// expected out7
initial
begin
	out7_expected = 1'bX;
end 

// expected ripple1
initial
begin
	ripple1_expected = 1'bX;
end 
// generate trigger
always @(maxMin2_expected or maxMin2 or out0_expected or out0 or out1_expected or out1 or out2_expected or out2 or out3_expected or out3 or out4_expected or out4 or out5_expected or out5 or out6_expected or out6 or out7_expected or out7 or ripple1_expected or ripple1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected maxMin2 = %b | expected out0 = %b | expected out1 = %b | expected out2 = %b | expected out3 = %b | expected out4 = %b | expected out5 = %b | expected out6 = %b | expected out7 = %b | expected ripple1 = %b | ",maxMin2_expected_prev,out0_expected_prev,out1_expected_prev,out2_expected_prev,out3_expected_prev,out4_expected_prev,out5_expected_prev,out6_expected_prev,out7_expected_prev,ripple1_expected_prev);
	$display("| real maxMin2 = %b | real out0 = %b | real out1 = %b | real out2 = %b | real out3 = %b | real out4 = %b | real out5 = %b | real out6 = %b | real out7 = %b | real ripple1 = %b | ",maxMin2_prev,out0_prev,out1_prev,out2_prev,out3_prev,out4_prev,out5_prev,out6_prev,out7_prev,ripple1_prev);
`endif
	if (
		( maxMin2_expected_prev !== 1'bx ) && ( maxMin2_prev !== maxMin2_expected_prev )
		&& ((maxMin2_expected_prev !== last_maxMin2_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port maxMin2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", maxMin2_expected_prev);
		$display ("     Real value = %b", maxMin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_maxMin2_exp = maxMin2_expected_prev;
	end
	if (
		( out0_expected_prev !== 1'bx ) && ( out0_prev !== out0_expected_prev )
		&& ((out0_expected_prev !== last_out0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out0_exp = out0_expected_prev;
	end
	if (
		( out1_expected_prev !== 1'bx ) && ( out1_prev !== out1_expected_prev )
		&& ((out1_expected_prev !== last_out1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out1_exp = out1_expected_prev;
	end
	if (
		( out2_expected_prev !== 1'bx ) && ( out2_prev !== out2_expected_prev )
		&& ((out2_expected_prev !== last_out2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out2_exp = out2_expected_prev;
	end
	if (
		( out3_expected_prev !== 1'bx ) && ( out3_prev !== out3_expected_prev )
		&& ((out3_expected_prev !== last_out3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out3_exp = out3_expected_prev;
	end
	if (
		( out4_expected_prev !== 1'bx ) && ( out4_prev !== out4_expected_prev )
		&& ((out4_expected_prev !== last_out4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out4_exp = out4_expected_prev;
	end
	if (
		( out5_expected_prev !== 1'bx ) && ( out5_prev !== out5_expected_prev )
		&& ((out5_expected_prev !== last_out5_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5_expected_prev);
		$display ("     Real value = %b", out5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out5_exp = out5_expected_prev;
	end
	if (
		( out6_expected_prev !== 1'bx ) && ( out6_prev !== out6_expected_prev )
		&& ((out6_expected_prev !== last_out6_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6_expected_prev);
		$display ("     Real value = %b", out6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out6_exp = out6_expected_prev;
	end
	if (
		( out7_expected_prev !== 1'bx ) && ( out7_prev !== out7_expected_prev )
		&& ((out7_expected_prev !== last_out7_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7_expected_prev);
		$display ("     Real value = %b", out7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out7_exp = out7_expected_prev;
	end
	if (
		( ripple1_expected_prev !== 1'bx ) && ( ripple1_prev !== ripple1_expected_prev )
		&& ((ripple1_expected_prev !== last_ripple1_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ripple1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ripple1_expected_prev);
		$display ("     Real value = %b", ripple1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ripple1_exp = ripple1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CounterDivider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg DownUp;
reg GN;
reg In0;
reg In1;
reg In2;
reg In3;
reg In4;
reg In5;
reg In6;
reg In7;
reg Init;
// wires                                               
wire maxMin2;
wire out0;
wire out1;
wire out2;
wire out3;
wire out4;
wire out5;
wire out6;
wire out7;
wire ripple1;

wire sampler;                             

// assign statements (if any)                          
CounterDivider i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.DownUp(DownUp),
	.GN(GN),
	.In0(In0),
	.In1(In1),
	.In2(In2),
	.In3(In3),
	.In4(In4),
	.In5(In5),
	.In6(In6),
	.In7(In7),
	.Init(Init),
	.maxMin2(maxMin2),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.out5(out5),
	.out6(out6),
	.out7(out7),
	.ripple1(ripple1)
);

// clk
initial
begin
	clk = 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
end 

// DownUp
initial
begin
	DownUp = 1'bX;
	DownUp = #200000 1'b0;
	DownUp = #720000 1'bX;
end 

// GN
initial
begin
	GN = 1'b1;
	GN = #200000 1'b0;
end 

// In0
initial
begin
	In0 = 1'b1;
	In0 = #170000 1'b0;
end 

// In1
initial
begin
	In1 = 1'b1;
	In1 = #170000 1'b0;
end 

// In2
initial
begin
	In2 = 1'b1;
	In2 = #170000 1'b0;
end 

// In3
initial
begin
	In3 = 1'b1;
	In3 = #170000 1'b0;
end 

// In4
initial
begin
	In4 = 1'b0;
end 

// In5
initial
begin
	In5 = 1'b0;
end 

// In6
initial
begin
	In6 = 1'b0;
end 

// In7
initial
begin
	In7 = 1'b1;
	In7 = #170000 1'b0;
end 

// Init
initial
begin
	Init = 1'b1;
	Init = #40000 1'b0;
	Init = #110000 1'b1;
end 
endmodule