// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2020 11:50:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CounterDivider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps

module CounterDivider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg DownUp;
reg GN;
reg In0;
reg In1;
reg In2;
reg In3;
reg In4;
reg In5;
reg In6;
reg In7;
reg Init;
// wires                                               
wire maxMin2;
wire out0;
wire out1;
wire out2;
wire out3;
wire out4;
wire out5;
wire out6;
wire out7;
wire ripple1;

wire sampler;                             

// assign statements (if any)                          
CounterDivider i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.DownUp(DownUp),
	.GN(GN),
	.In0(In0),
	.In1(In1),
	.In2(In2),
	.In3(In3),
	.In4(In4),
	.In5(In5),
	.In6(In6),
	.In7(In7),
	.Init(Init),
	.maxMin2(maxMin2),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.out5(out5),
	.out6(out6),
	.out7(out7),
	.ripple1(ripple1)
);

// clk
initial
begin
	clk = 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
end 

// DownUp
initial
begin
	DownUp = 1'bX;
	DownUp = #200000 1'b0;
	DownUp = #720000 1'bX;
end 

// GN
initial
begin
	GN = 1'b1;
	GN = #200000 1'b0;
end 

// In0
initial
begin
	In0 = 1'b1;
	In0 = #170000 1'b0;
end 

// In1
initial
begin
	In1 = 1'b1;
	In1 = #170000 1'b0;
end 

// In2
initial
begin
	In2 = 1'b1;
	In2 = #170000 1'b0;
end 

// In3
initial
begin
	In3 = 1'b1;
	In3 = #170000 1'b0;
end 

// In4
initial
begin
	In4 = 1'b0;
end 

// In5
initial
begin
	In5 = 1'b0;
end 

// In6
initial
begin
	In6 = 1'b0;
end 

// In7
initial
begin
	In7 = 1'b1;
	In7 = #170000 1'b0;
end 

// Init
initial
begin
	Init = 1'b1;
	Init = #40000 1'b0;
	Init = #110000 1'b1;
end 
endmodule

